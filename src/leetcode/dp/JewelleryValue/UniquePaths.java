package leetcode.dp.JewelleryValue;

/**
 * 不同路径
 * https://leetcode.cn/problems/unique-paths/description/
 *
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
 * 问总共有多少条不同的路径？
 *
 *
 * 示例 1：
 *
 * 输入：m = 3, n = 7
 * 输出：28
 *
 *
 * 示例 2：
 *
 * 输入：m = 3, n = 2
 * 输出：3
 * 解释：
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向下
 *
 *
 * 示例 3：
 *
 * 输入：m = 7, n = 3
 * 输出：28
 *
 *
 * 示例 4：
 *
 * 输入：m = 3, n = 3
 * 输出：6
 *
 *
 * 提示：
 *
 * 1 <= m, n <= 100
 * 题目数据保证答案小于等于 2 * 109
 */

/**
 * 思路：
 * 创建一个记录当前格到终点路径数量的矩阵
 * 矩阵最右边的列和最下面的行中的值均为1，因为只有一条路可以走
 * 从r[m-2][n-2]开始拿右边的值加下面的值，公式转换：r[i][j] = r[i+1][j] + r[i][j+1];
 * 如示例4, 会创建如下矩阵：
 * 6,3,1
 * 3,2,1
 * 1,1,1
 *
 * 返回矩阵[0][0]的值即为答案
 */
class UniquePaths {
    public int uniquePaths(int m, int n) {
        int[][] r = new int[m][n];
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == (m-1) || (j == n-1)) {
                    r[i][j] = 1;
                } else {
                    r[i][j] = r[i+1][j] + r[i][j+1];
                }  
            }
        }
        return r[0][0];
    }
}